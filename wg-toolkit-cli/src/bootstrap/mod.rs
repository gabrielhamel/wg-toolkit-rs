use std::io::{self, Write, BufWriter};
use std::collections::HashSet;
use std::fs::{self, File};
use std::cmp::Ordering;
use std::borrow::Cow;
use std::path::Path;

use wgtk::res::ResFilesystem;
use wgtk::pxml;

use crate::{BootstrapArgs, CliResult};

mod parse;
mod model;

use model::{Entity, Interface, Method, Model, PropertyFlags, Ty, TyKind, VariableHeaderSize};

// NOTE: For the future, if python bytecode interpretation is needed to automatically
// generate enumeration or try to gather function arguments' names, see:
// https://github.com/python/cpython/blob/main/InternalDocs/interpreter.md


/// Entrypoint.
pub fn cmd_bootstrap(args: BootstrapArgs) -> CliResult<()> {

    let fs = ResFilesystem::new(args.dir)
        .map_err(|e| format!("Failed to open resource filesystem, reason: {e}"))?;
        
    let model = load(fs)
        .map_err(|e| format!("Failed to load model, reason: {e}"))?;
    
    let mut state = State::new();
    generate(&args.dest, &model, &mut state)
        .map_err(|e| format!("Failed to generate model, reason: {e}"))?;

    Ok(())

}

fn load(fs: ResFilesystem) -> io::Result<Model> {

    let mut model = Model::default();

    println!("== Reading aliases...");
    let alias_reader = fs.read("scripts/entity_defs/alias.xml")?;
    let alias_elt = pxml::from_reader(alias_reader).unwrap();
    parse::parse_aliases(&alias_elt, &mut model.tys);

    println!("== Reading interfaces...");
    for interface_file in fs.read_dir("scripts/entity_defs/interfaces")? {
        
        let interface_file = interface_file?;
        let Some((interface_name, "")) = interface_file.name().split_once(".def") else {
            continue;
        };

        println!(" = {interface_name}");

        let interface_reader = fs.read(interface_file.path())?;
        let interface_elt = pxml::from_reader(interface_reader).unwrap();
        let interface = parse::parse_interface(&interface_elt, &mut model.tys, interface_name.to_string());
        model.interfaces.push(interface);

    }

    println!("== Reading entities...");
    let entities_reader = fs.read("scripts/entities.xml")?;
    let entities_elt = pxml::from_reader(entities_reader).unwrap();
    let entities_elt = entities_elt.get_child("ClientServerEntities").unwrap().as_element().unwrap();
    for (index, (entity_name, _)) in entities_elt.iter_children_all().enumerate() {
        
        println!(" = {entity_name}");
        let entity_reader = fs.read(format!("scripts/entity_defs/{entity_name}.def"))?;
        let entity_elt = pxml::from_reader(entity_reader).unwrap();
        let entity = parse::parse_entity(&entity_elt, &mut model.tys, index + 1, entity_name.to_string());
        model.entities.push(entity);

    }

    println!("== Types: {}", model.tys.count());

    Ok(model)

}

fn generate(dest_dir: &Path, model: &Model, state: &mut State) -> io::Result<()> {
    generate_mod(dest_dir, model, state)
}

fn generate_mod(mod_dir: &Path, model: &Model, state: &mut State) -> io::Result<()> {

    let _ = fs::remove_dir_all(&mod_dir);
    fs::create_dir_all(&mod_dir)?;

    println!("== Writing module...");
    let mod_file = mod_dir.join("mod.rs");
    let mut writer = BufWriter::new(File::create(&mod_file)?);
    writeln!(writer, "#![allow(non_camel_case_types, non_snake_case, unused)]")?;
    writeln!(writer)?;
    writeln!(writer, "//! This module is generated by bootstrap command of the CLI.")?;
    writeln!(writer)?;
    writeln!(writer, "pub mod alias;")?;
    writeln!(writer)?;

    generate_alias(mod_dir, model)?;

    // for app in &APPS {
    //     writeln!(writer, "pub mod {};", app.mod_name)?;
    //     let app_mod_dir = mod_dir.join(app.mod_name);
    //     generate_app_mod(&app_mod_dir, app, model, &mut *state)?;
    // }

    writeln!(writer, "pub mod interface;")?;
    writeln!(writer, "pub mod entity;")?;
    generate_interfaces(mod_dir, model, &mut *state)?;
    generate_entities(mod_dir, model, &mut *state)?;

    Ok(())

}

fn generate_alias(mod_dir: &Path, model: &Model) -> io::Result<()> {

    println!("== Writing aliases...");
    let alias_file = mod_dir.join("alias.rs");
    let mut writer = BufWriter::new(File::create(&alias_file)?);

    writeln!(writer, "pub use wgtk::net::app::common::data::*;")?;
    writeln!(writer)?;

    let mut prev_dict = false;

    for ty in model.tys.iter() {

        let identifier = generate_rust_identifier(ty.name());

        match ty.kind() {
            TyKind::Alias(alias_ty) => {
                if prev_dict {
                    writeln!(writer)?;
                    prev_dict = false;
                }
                writeln!(writer, "pub type {identifier} = {};", generate_type_ref(alias_ty))?;
            }
            TyKind::Dict(ty_dict) => {
                prev_dict = true;
                writeln!(writer)?;
                writeln!(writer, "wgtk::__bootstrap_struct_data_type! {{")?;
                writeln!(writer, "    #[derive(Debug)]")?;
                writeln!(writer, "    pub struct {identifier} {{")?;
                for prop in &ty_dict.properties {
                    let prop_identifier = generate_rust_identifier(&prop.name);
                    writeln!(writer, "        pub {prop_identifier}: {},", generate_type_ref(&prop.ty))?;
                }
                writeln!(writer, "    }}")?;
                writeln!(writer, "}}")?;
            }
            TyKind::Array(_) |
            TyKind::Tuple(_) => {
                // Arays and tuples are inlined when generating type ref, so we don't 
                // actually define them.
            }
            _ => {}  // Don't define builtins.
        }

    }

    Ok(())

}

/// From the given type, return a string referencing it, when possible it inlines it.
fn generate_type_ref(ty: &Ty) -> Cow<'_, str> {
    Cow::Borrowed(match ty.kind() {
        TyKind::Int8 => "i8",
        TyKind::Int16 => "i16",
        TyKind::Int32 => "i32",
        TyKind::Int64 => "i64",
        TyKind::UInt8 => "u8",
        TyKind::UInt16 => "u16",
        TyKind::UInt32 => "u32",
        TyKind::UInt64 => "u64",
        TyKind::Float32 => "f32",
        TyKind::Float64 => "f64",
        TyKind::Vector2 => "Vec2",
        TyKind::Vector3 => "Vec3",
        TyKind::Vector4 => "Vec4",
        TyKind::String => "RelaxString",
        TyKind::Python => "Python",
        TyKind::Mailbox => "Mailbox",
        TyKind::Array(ty_seq) |
        TyKind::Tuple(ty_seq) => {
            
            let inline = if let Some(size) = ty_seq.size {
                format!("Box<[{}; {size}]>", generate_type_ref(&ty_seq.ty))
            } else {
                format!("Vec<{}>", generate_type_ref(&ty_seq.ty))
            };

            return Cow::Owned(inline);

        }
        _ => ty.name()
    })
}

/// Deterministically generate a Rust-compatible identifier for types or fields.
fn generate_rust_identifier(name: &str) -> Cow<'_, str> {
    match name {
        "type" => Cow::Borrowed("r#type"),
        name => Cow::Borrowed(name),
    }
}

fn generate_interfaces(mod_dir: &Path, model: &Model, state: &mut State) -> io::Result<()> {

    println!("== Writing interfaces...");
    let interface_file = mod_dir.join("interface.rs");
    let mut writer = BufWriter::new(File::create(&interface_file)?);

    writeln!(writer, "use super::alias::*;")?;
    writeln!(writer)?;

    for interface in &model.interfaces {
        generate_interface(&mut writer, model, interface, &mut *state)?;
    }

    Ok(())

}

fn generate_entities(mod_dir: &Path, model: &Model, state: &mut State) -> io::Result<()> {

    println!("== Writing entities...");
    let entity_file = mod_dir.join("entity.rs");
    let mut writer = BufWriter::new(File::create(&entity_file)?);

    writeln!(writer, "use wgtk::net::app::common::entity::{{Entity, DataTypeEntity}};")?;
    writeln!(writer)?;
    writeln!(writer, "use super::alias::*;")?;
    writeln!(writer, "use super::interface::*;")?;
    writeln!(writer)?;

    for entity in &model.entities {
        generate_entity(&mut writer, model, entity, &mut *state)?;
    }

    // writeln!(writer, "wgtk::__bootstrap_enum_entities! {{")?;
    // writeln!(writer, "    /// Generic entity type enumeration allowing decoding of any entities.")?;
    // writeln!(writer, "    #[derive(Debug)]")?;
    // writeln!(writer, "    pub enum Generic: Generic_Client, Generic_Base, Generic_Cell {{")?;
    // for entity in &model.entities {
    //     writeln!(writer, "        {} = 0x{:02X},", entity.interface.name, entity.id)?;
    // }
    // writeln!(writer, "    }}")?;
    // writeln!(writer, "}}")?;
    // writeln!(writer)?;

    Ok(())

}

fn generate_entity(
    mut writer: impl Write, 
    model: &Model, 
    entity: &Entity,
    state: &mut State,
) -> io::Result<()> {

    writeln!(writer, "// Entity 0x{:02X}", entity.id)?;
    generate_interface(&mut writer, model, &entity.interface, state)?;
    
    for app_state in &mut state.apps {
        generate_entity_methods(&mut writer, model, entity, app_state)?;
    }
    
    writeln!(writer, "impl {} {{", entity.interface.name)?;
    writeln!(writer, "    const TYPE_ID: u16 = 0x{:02X};", entity.id)?;
    writeln!(writer, "}}")?;
    writeln!(writer)?;

    writeln!(writer, "impl DataTypeEntity for {} {{", entity.interface.name)?;
    writeln!(writer, "    type ClientMethod = {}_Client;", entity.interface.name)?;
    writeln!(writer, "    type BaseMethod = {}_Base;", entity.interface.name)?;
    writeln!(writer, "    type CellMethod = {}_Cell;", entity.interface.name)?;
    writeln!(writer, "}}")?;
    writeln!(writer)?;

    Ok(())

}

fn generate_entity_methods(
    mut writer: impl Write,
    model: &Model, 
    entity: &Entity,
    app_state: &mut AppState,
)  -> io::Result<()> {

    /// An exposed method for the network protocol, this is used to list all exposed 
    /// methods on an entity and then compute the methods' exposed ids by sorting them.
    #[derive(Debug)]
    struct ExposedMethod<'a> {
        interface: &'a Interface,
        method: &'a Method,
        stream_size: StreamSize,
    }

    /// This method recursively register all methods for the entity in order to sort them
    /// later depending on their arguments' size and then compute there exposed id for
    /// the network protocol.
    /// 
    /// IMPORTANT: The initial order of the exposed method is really important because we
    /// will use a stable sort, and some orders should not be changed.
    fn add_internal_methods<'m>(
        exposed_methods: &mut Vec<ExposedMethod<'m>>, 
        model: &'m Model, 
        interface: &'m Interface,
        app_state: &mut AppState,
    ) {

        for interface_name in &interface.implements {

            let interface = model.interfaces.iter()
                .find(|i| &i.name == interface_name)
                .expect("unknown implemented interface");

            add_internal_methods(exposed_methods, model, interface, &mut *app_state);

        }
        
        for method in (app_state.interface_methods)(interface) {
            if is_method_exposed(method) {
                exposed_methods.push(ExposedMethod {
                    interface,
                    method,
                    stream_size: compute_method_stream_size(method),
                });
            }
        }

    }

    let mut methods = Vec::new();
    add_internal_methods(&mut methods, model, &entity.interface, &mut *app_state);

    // We want to sort fixed methods first and variable last, and then sort between
    // their configured fixed or variable size.
    methods.sort_by(|a, b| {
        match (a.stream_size, b.stream_size) {
            (StreamSize::Variable(a_size), StreamSize::Variable(b_size)) => 
                a_size.cmp(&b_size),
            (StreamSize::Fixed(a_size), StreamSize::Fixed(b_size)) =>
                a_size.cmp(&b_size),
            (StreamSize::Fixed(_), StreamSize::Variable(_)) =>
                Ordering::Less,
            (StreamSize::Variable(_), StreamSize::Fixed(_)) =>
                Ordering::Greater,
        }
    });

    writeln!(writer, "// Entity methods for {} on {}", entity.interface.name, app_state.name)?;
    writeln!(writer, "wgtk::__bootstrap_enum_methods! {{")?;
    writeln!(writer, "    #[derive(Debug)]")?;
    writeln!(writer, "    pub enum {}_{} {{", 
        entity.interface.name, app_state.suffix)?;

    for (exposed_id, method) in methods.iter().enumerate() {

        let element_length = match method.stream_size {
            StreamSize::Fixed(length) => Cow::Owned(format!("{length}")),
            StreamSize::Variable(VariableHeaderSize::Variable8) => Cow::Borrowed("var8"),
            StreamSize::Variable(VariableHeaderSize::Variable16) => Cow::Borrowed("var16"),
            StreamSize::Variable(VariableHeaderSize::Variable24) => Cow::Borrowed("var24"),
            StreamSize::Variable(VariableHeaderSize::Variable32) => Cow::Borrowed("var32"),
        };

        writeln!(writer, "        {}_{}(0x{exposed_id:02X}, {element_length}),", 
            method.interface.name, method.method.name)?;

    }
    
    writeln!(writer, "    }}")?;
    writeln!(writer, "}}")?;
    writeln!(writer)?;

    Ok(())

}

fn generate_interface(
    mut writer: impl Write, 
    model: &Model, 
    interface: &Interface,
    state: &mut State,
) -> io::Result<()> {
    
    writeln!(writer, "// Interface {}", interface.name)?;
    writeln!(writer, "wgtk::__bootstrap_struct_data_type! {{")?;
    writeln!(writer, "    #[derive(Debug)]")?;
    writeln!(writer, "    pub struct {} {{", interface.name)?;
    
    for interface_name in &interface.implements {
        if !state.empty_interfaces.contains(interface_name) {
            writeln!(writer, "        pub i_{interface_name}: {interface_name},")?;
        }
    }

    let mut count = 0;
    for property in &interface.properties {
        if matches!(property.flags, PropertyFlags::AllClients | PropertyFlags::OwnClient | PropertyFlags::BaseAndClient) {
            writeln!(writer, "        pub {}: {},", property.name, generate_type_ref(&property.ty))?;
            count += 1;
        }
    }

    if count == 0 {
        state.empty_interfaces.insert(interface.name.clone());
    }

    writeln!(writer, "    }}")?;
    writeln!(writer, "}}")?;
    writeln!(writer)?;

    for app_state in &mut state.apps {
        generate_interface_methods(&mut writer, model, interface, app_state)?;
    }

    Ok(())

}

fn generate_interface_methods(
    mut writer: impl Write,
    _model: &Model, 
    interface: &Interface,
    app_state: &mut AppState,
)  -> io::Result<()> {

    let mut unique_names = HashSet::new();
    
    writeln!(writer, "// Method for {} on {}", interface.name, app_state.name)?;
    writeln!(writer, "wgtk::__bootstrap_struct_data_type! {{")?;
    writeln!(writer)?;

    for method in (app_state.interface_methods)(interface) {

        if !is_method_exposed(method) {
            continue;
        }

        if !unique_names.insert(method.name.as_str()) {
            panic!("function name present multiple times: {}", method.name);
        }

        writeln!(writer, "    #[derive(Debug)]")?;
        writeln!(writer, "    pub struct {}_{} {{", interface.name, method.name)?;

        for (arg_idx, arg) in method.args.iter().enumerate() {
            writeln!(writer, "        pub a{arg_idx}: {},", generate_type_ref(&arg.ty))?;
        }

        writeln!(writer, "    }}")?;
        writeln!(writer)?;

    }

    writeln!(writer, "}}")?;
    writeln!(writer)?;

    Ok(())

}

/// Return the stream size of this type, none if the type has no known size.
fn compute_type_stream_size(ty: &Ty) -> Option<usize> {
    match ty.kind() {
        TyKind::Int8 | TyKind::UInt8 => Some(1),
        TyKind::Int16 | TyKind::UInt16 => Some(2),
        TyKind::Int32 | TyKind::UInt32 => Some(4),
        TyKind::Int64 | TyKind::UInt64 => Some(8),
        TyKind::Float32 => Some(4),
        TyKind::Float64 => Some(8),
        TyKind::Vector2 => Some(4 * 2),
        TyKind::Vector3 => Some(4 * 3),
        TyKind::Vector4 => Some(4 * 4),
        TyKind::String => None,
        TyKind::Python => None,
        TyKind::Mailbox => None,  // TODO:
        TyKind::Alias(ty) => 
            compute_type_stream_size(ty),
        TyKind::Dict(ty_dict) => 
            ty_dict.properties.iter()
                .map(|prop| compute_type_stream_size(&prop.ty))
                .sum(),  // Using sum on Option: any None will result in a None.
        TyKind::Array(ty_seq) |
        TyKind::Tuple(ty_seq) => 
            ty_seq.size.map(|len| len as usize)
                .zip(compute_type_stream_size(&ty_seq.ty))
                .map(|(len, element_size)| len * element_size)
    }
}

/// This returns the preferred stream size.
fn compute_method_stream_size(method: &Method) -> StreamSize {
    
    let size = method.args.iter()
        .map(|arg| compute_type_stream_size(&arg.ty))
        .sum::<Option<usize>>();

    match size {
        Some(size) => StreamSize::Fixed(size),
        // TODO: Also return this is exposed and has sub msg id?
        None => StreamSize::Variable(method.variable_header_size)
    }

}

fn is_method_exposed(method: &Method) -> bool {
    method.exposed_to_all_clients || method.exposed_to_own_client
}


/// Internal state when bootstrapping.
#[derive(Debug)]
struct State {
    /// A set of interfaces without any fields (sizeof=0) for which it's useless to 
    /// generate variants.
    empty_interfaces: HashSet<String>,
    apps: [AppState; 3],
}

#[derive(Debug)]
struct AppState {
    name: &'static str,
    suffix: &'static str,
    interface_methods: fn(&Interface) -> &[Method],
}

impl State {
    fn new() -> Self {
        Self { 
            empty_interfaces: HashSet::new(), 
            apps: [
                AppState::new("client", "Client", |i| &i.client_methods),
                AppState::new("base", "Base", |i| &i.base_methods),
                AppState::new("cell", "Cell", |i| &i.cell_methods),
            ],
        }
    }
}

impl AppState {
    fn new(name: &'static str, suffix: &'static str, interface_methods: fn(&Interface) -> &[Method]) -> Self {
        Self {
            name,
            suffix,
            interface_methods,
        }
    }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
enum StreamSize {
    Fixed(usize),
    Variable(VariableHeaderSize),
}
